name: Build Apps

permissions:
  contents: write

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-native:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install SDL2 and X11 Dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential \
            libx11-dev \
            libxext-dev \
            libxcursor-dev \
            libxinerama-dev \
            libxi-dev \
            libxrandr-dev \
            libxss-dev \
            libxxf86vm-dev \
            libwayland-dev \
            libwayland-client0 \
            libwayland-cursor0 \
            libwayland-egl1 \
            libxkbcommon-dev \
            wayland-protocols
          wget https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz
          tar xzf SDL2-2.28.5.tar.gz
          cd SDL2-2.28.5
          ./configure --prefix=/usr/local --enable-static --disable-shared
          make -j$(nproc)
          sudo make install
          cd ..
          # Build SDL2_image
          wget https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-2.6.3.tar.gz
          tar xzf SDL2_image-2.6.3.tar.gz
          cd SDL2_image-2.6.3
          ./configure --prefix=/usr/local --enable-static --disable-shared
          make -j$(nproc)
          sudo make install

      - name: Setup MSYS2 and Dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-SDL2
            mingw-w64-x86_64-SDL2_image
            make

      - name: Build Native App (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native
          chmod +x compile.sh
          ./compile.sh

      - name: Build Native App (Windows)
        if: matrix.platform == 'windows-latest'
        shell: msys2 {0}
        run: |
          cd native
          ./compile.bat

      - name: Rename Native Files
        run: |
          cd native
          # Rename executables to include 'native' suffix
          if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            for file in googleballs-desktop*; do
              if [ -f "$file" ] && [ -x "$file" ]; then
                mv "$file" "${file}-native"
              fi
            done
          else
            # Windows
            for file in *.exe; do
              if [ -f "$file" ]; then
                base=${file%.exe}
                mv "$file" "${base}-native.exe"
              fi
            done
          fi
        shell: bash

      - name: Upload Native Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.platform }}_native
          path: |
            native/googleballs-desktop*
            native/*.exe

  build-native-rust:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install OS packages (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential

      - name: Build native-rust (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native-rust
          cargo build --release

      - name: Build native-rust (Windows)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          cd native-rust
          cargo build --release

      - name: Upload native-rust artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-rust-${{ matrix.platform }}
          path: |
            native-rust/target/release/*

  build-native-gtk:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Install GTK3 Dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev make

      - name: Setup MSYS2 and GTK3 (Windows)
        if: matrix.platform == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-make
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-ntldd
            make

      - name: Build GTK App (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native-gtk
          make

      - name: Build GTK App (Windows)
        if: matrix.platform == 'windows-latest'
        shell: msys2 {0}
        run: |
          cd native-gtk
          make CC=x86_64-w64-mingw32-gcc PKG_CONFIG=/mingw64/bin/pkg-config

      - name: Bundle GTK Libraries (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native-gtk/build
          
          # Create libs directory
          mkdir -p libs
          
          # Get the executable name (adjust pattern as needed for your executable)
          EXECUTABLE=$(find . -maxdepth 1 -type f -executable ! -name "*.sh" ! -name "launch.sh" | head -1)
          EXECUTABLE_NAME=$(basename "$EXECUTABLE")
          
          echo "Bundling libraries for executable: $EXECUTABLE_NAME"
          
          # Function to copy library and its dependencies
          copy_lib_deps() {
            local pattern="$1"
            ldd "$EXECUTABLE" | grep "$pattern" | while read line; do
              lib_path=$(echo "$line" | awk '{print $3}')
              if [ -n "$lib_path" ] && [ -f "$lib_path" ] && [ ! -f "libs/$(basename "$lib_path")" ]; then
                cp "$lib_path" libs/
                echo "Copied: $(basename "$lib_path")"
              fi
            done
          }
          
          # Copy GTK3 and related libraries
          copy_lib_deps "libgtk-3"
          copy_lib_deps "libgdk-3"
          copy_lib_deps "libgio-2"
          copy_lib_deps "libglib-2"
          copy_lib_deps "libgobject-2"
          copy_lib_deps "libgmodule-2"
          copy_lib_deps "libgthread-2"
          copy_lib_deps "libcairo"
          copy_lib_deps "libpango"
          copy_lib_deps "libatk-1"
          copy_lib_deps "libgdk_pixbuf"
          copy_lib_deps "libfontconfig"
          copy_lib_deps "libfreetype"
          copy_lib_deps "libharfbuzz"
          copy_lib_deps "libffi"
          copy_lib_deps "libpcre"
          copy_lib_deps "libmount"
          copy_lib_deps "libblkid"
          copy_lib_deps "libuuid"
          copy_lib_deps "libselinux"
          copy_lib_deps "libexpat"
          copy_lib_deps "libpng"
          copy_lib_deps "libz"
          copy_lib_deps "libintl"
          copy_lib_deps "libiconv"
          copy_lib_deps "libfribidi"
          copy_lib_deps "libpixman"
          copy_lib_deps "libthai"
          copy_lib_deps "libdatrie"
          copy_lib_deps "libbrotli"
          copy_lib_deps "libbz2"
          
          # Copy any additional system libraries that might be needed
          copy_lib_deps "libX11"
          copy_lib_deps "libXext"
          copy_lib_deps "libXrender"
          copy_lib_deps "libXi"
          copy_lib_deps "libXfixes"
          copy_lib_deps "libXcursor"
          copy_lib_deps "libXdamage"
          copy_lib_deps "libXcomposite"
          copy_lib_deps "libXrandr"
          copy_lib_deps "libXinerama"

          # other stuff
          copy_lib_deps "libjpeg"
          
          # Rename executable to include GTK suffix
          if [ -f "$EXECUTABLE_NAME" ]; then
            mv "$EXECUTABLE_NAME" "${EXECUTABLE_NAME}-gtk"
            EXECUTABLE_NAME="${EXECUTABLE_NAME}-gtk"
          fi
          
          # Create a launch script that sets LD_LIBRARY_PATH
          cat > launch.sh << EOF
          #!/bin/bash
          SCRIPT_DIR="\$(cd "\$(dirname "\${BASH_SOURCE[0]}")" && pwd)"
          export LD_LIBRARY_PATH="\$SCRIPT_DIR/libs:\$LD_LIBRARY_PATH"
          exec "\$SCRIPT_DIR/$EXECUTABLE_NAME" "\$@"
          EOF
          chmod +x launch.sh
          
          # Create a README for users
          cat > README.txt << EOF
          GTK3 Application Bundle
          ======================
          
          This package contains a self-contained GTK3 application.
          
          To run the application:
          1. Extract all files to a directory
          2. Run: ./launch.sh
          
          Or alternatively, set LD_LIBRARY_PATH manually:
          export LD_LIBRARY_PATH=./libs:\$LD_LIBRARY_PATH
          ./$EXECUTABLE_NAME
          
          All required GTK3 libraries are included in the libs/ directory.
          EOF
          
          echo "Linux GTK3 libraries bundled successfully"
          echo "Bundled libraries:"
          ls -la libs/

      - name: Bundle GTK Libraries (Windows)
        if: matrix.platform == 'windows-latest'
        shell: msys2 {0}
        run: |
          cd native-gtk/build
          
          # Get the executable name and rename it
          EXECUTABLE=$(ls *.exe | head -1)
          EXECUTABLE_NAME="$EXECUTABLE"
          
          if [ -f "$EXECUTABLE_NAME" ]; then
            base=${EXECUTABLE_NAME%.exe}
            NEW_NAME="${base}-gtk.exe"
            mv "$EXECUTABLE_NAME" "$NEW_NAME"
            EXECUTABLE_NAME="$NEW_NAME"
          fi
          
          echo "Bundling libraries for executable: $EXECUTABLE_NAME"
          
          # Core GTK3 libraries
          cp /mingw64/bin/libgtk-3-0.dll . 2>/dev/null || echo "libgtk-3-0.dll not found"
          cp /mingw64/bin/libgdk-3-0.dll . 2>/dev/null || echo "libgdk-3-0.dll not found"
          cp /mingw64/bin/libgio-2.0-0.dll . 2>/dev/null || echo "libgio-2.0-0.dll not found"
          cp /mingw64/bin/libglib-2.0-0.dll . 2>/dev/null || echo "libglib-2.0-0.dll not found"
          cp /mingw64/bin/libgobject-2.0-0.dll . 2>/dev/null || echo "libgobject-2.0-0.dll not found"
          cp /mingw64/bin/libgmodule-2.0-0.dll . 2>/dev/null || echo "libgmodule-2.0-0.dll not found"
          
          # Cairo and Pango
          cp /mingw64/bin/libcairo-2.dll . 2>/dev/null || echo "libcairo-2.dll not found"
          cp /mingw64/bin/libcairo-gobject-2.dll . 2>/dev/null || echo "libcairo-gobject-2.dll not found"
          cp /mingw64/bin/libpango-1.0-0.dll . 2>/dev/null || echo "libpango-1.0-0.dll not found"
          cp /mingw64/bin/libpangocairo-1.0-0.dll . 2>/dev/null || echo "libpangocairo-1.0-0.dll not found"
          cp /mingw64/bin/libpangowin32-1.0-0.dll . 2>/dev/null || echo "libpangowin32-1.0-0.dll not found"
          cp /mingw64/bin/libpangoft2-1.0-0.dll . 2>/dev/null || echo "libpangoft2-1.0-0.dll not found"
          
          # ATK and GDK Pixbuf
          cp /mingw64/bin/libatk-1.0-0.dll . 2>/dev/null || echo "libatk-1.0-0.dll not found"
          cp /mingw64/bin/libgdk_pixbuf-2.0-0.dll . 2>/dev/null || echo "libgdk_pixbuf-2.0-0.dll not found"
          
          # Font and text rendering
          cp /mingw64/bin/libfontconfig-1.dll . 2>/dev/null || echo "libfontconfig-1.dll not found"
          cp /mingw64/bin/libfreetype-6.dll . 2>/dev/null || echo "libfreetype-6.dll not found"
          cp /mingw64/bin/libharfbuzz-0.dll . 2>/dev/null || echo "libharfbuzz-0.dll not found"
          cp /mingw64/bin/libfribidi-0.dll . 2>/dev/null || echo "libfribidi-0.dll not found"
          
          # Core system libraries
          cp /mingw64/bin/libffi-8.dll . 2>/dev/null || echo "libffi-8.dll not found"
          cp /mingw64/bin/libpcre2-8-0.dll . 2>/dev/null || echo "libpcre2-8-0.dll not found"
          cp /mingw64/bin/libintl-8.dll . 2>/dev/null || echo "libintl-8.dll not found"
          cp /mingw64/bin/libiconv-2.dll . 2>/dev/null || echo "libiconv-2.dll not found"
          
          # Threading and runtime
          cp /mingw64/bin/libwinpthread-1.dll . 2>/dev/null || echo "libwinpthread-1.dll not found"
          cp /mingw64/bin/libgcc_s_seh-1.dll . 2>/dev/null || echo "libgcc_s_seh-1.dll not found"
          cp /mingw64/bin/libstdc++-6.dll . 2>/dev/null || echo "libstdc++-6.dll not found"
          
          # Image and compression libraries
          cp /mingw64/bin/libexpat-1.dll . 2>/dev/null || echo "libexpat-1.dll not found"
          cp /mingw64/bin/libpng16-16.dll . 2>/dev/null || echo "libpng16-16.dll not found"
          cp /mingw64/bin/zlib1.dll . 2>/dev/null || echo "zlib1.dll not found"
          cp /mingw64/bin/libbz2-1.dll . 2>/dev/null || echo "libbz2-1.dll not found"
          cp /mingw64/bin/libbrotlidec.dll . 2>/dev/null || echo "libbrotlidec.dll not found"
          cp /mingw64/bin/libbrotlicommon.dll . 2>/dev/null || echo "libbrotlicommon.dll not found"
          cp /mingw64/bin/libjpeg-8.dll . 2>/dev/null || echo "libjpeg-8.dll not found"
          cp /mingw64/bin/libtiff-6.dll . 2>/dev/null || echo "libtiff-6.dll not found"
          
          # Text processing
          cp /mingw64/bin/libdatrie-1.dll . 2>/dev/null || echo "libdatrie-1.dll not found"
          cp /mingw64/bin/libthai-0.dll . 2>/dev/null || echo "libthai-0.dll not found"
          cp /mingw64/bin/libpixman-1-0.dll . 2>/dev/null || echo "libpixman-1-0.dll not found"
          
          # Additional libraries that might be needed
          cp /mingw64/bin/libepoxy-0.dll . 2>/dev/null || echo "libepoxy-0.dll not found"
          cp /mingw64/bin/libgraphite2.dll . 2>/dev/null || echo "libgraphite2.dll not found"
          cp /mingw64/bin/liblzma-5.dll . 2>/dev/null || echo "liblzma-5.dll not found"
          cp /mingw64/bin/libxml2-2.dll . 2>/dev/null || echo "libxml2-2.dll not found"
          cp /mingw64/bin/libjasper-7.dll . 2>/dev/null || echo "libjasper-7.dll not found"
          cp /mingw64/bin/libwebp-7.dll . 2>/dev/null || echo "libwebp-7.dll not found"

          # other stuff
          cp /mingw64/bin/libdeflate.dll . 2>/dev/null || echo "libdeflate.dll not found"
          cp /mingw64/bin/libjbig-0.dll . 2>/dev/null || echo "libjbig-0.dll not found"
          cp /mingw64/bin/libLerc.dll . 2>/dev/null || echo "libLerc.dll not found"
          cp /mingw64/bin/libzstd.dll . 2>/dev/null || echo "libzstd.dll not found"
          cp /mingw64/bin/libsharpyuv-0.dll . 2>/dev/null || echo "libsharpyuv-0.dll not found"
          
          echo "Windows GTK3 libraries bundled successfully"
          echo "Bundled DLLs:"
          ls -la *.dll | head -20
          echo "... and more"

      - name: Create Distribution Archives (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          cd native-gtk/build
          ARCHIVE_NAME="gtk-app-linux-x64"
          tar -czf "../${ARCHIVE_NAME}.tar.gz" .
          echo "Created: ${ARCHIVE_NAME}.tar.gz"

      - name: Create Distribution Archives (Windows)
        if: matrix.platform == 'windows-latest'
        shell: msys2 {0}
        run: |
          cd native-gtk/build
          ARCHIVE_NAME="gtk-app-windows-x64"
          tar -czf "../${ARCHIVE_NAME}.tar.gz" .
          echo "Created: ${ARCHIVE_NAME}.tar.gz"

      - name: Upload GTK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: native-gtk-${{ matrix.platform }}_native
          path: |
            native-gtk/build/
            native-gtk/*.tar.gz

  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install Dependencies (Tauri)
        run: |
          cd tauri
          npm install

      - name: Build Tauri App (Linux and Windows)
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'windows-latest'
        run: |
          cd tauri
          npm run tauri build

      - name: Rename Tauri Files
        run: |
          cd tauri/src-tauri/target/release/bundle
          
          # Rename executables in different bundle formats
          if [ "${{ matrix.platform }}" == "ubuntu-latest" ]; then
            # Linux - handle AppImage and deb
            find . -name "*.AppImage" -exec sh -c 'mv "$1" "${1%.AppImage}-tauri.AppImage"' _ {} \;
            
            # For deb packages, rename the actual executable inside if needed
            if [ -d "deb" ]; then
              find deb -name "*.deb" -exec sh -c '
                base=$(basename "$1" .deb)
                mv "$1" "$(dirname "$1")/${base}-tauri.deb"
              ' _ {} \;
            fi
            
          else
            # Windows - handle msi and exe
            find . -name "*.msi" -exec sh -c 'mv "$1" "${1%.msi}-tauri.msi"' _ {} \;
            find . -name "*.exe" -exec sh -c 'mv "$1" "${1%.exe}-tauri.exe"' _ {} \;
          fi
        shell: bash

      - name: Upload Tauri Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform }}_tauri
          path: |
            tauri/src-tauri/target/release/bundle/

  build-electron:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.platform }}
    container: ${{ matrix.platform == 'ubuntu-latest' && 'rockylinux:9' || '' }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Linux Dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          # Install EPEL and development tools
          dnf install -y epel-release
          dnf groupinstall -y "Development Tools"
          dnf config-manager --set-enabled crb

          # Install Node.js 20 and basic build requirements
          dnf install -y nodejs npm gcc-c++ make python3

          # Install RPM build requirements
          dnf install -y libxcrypt-compat dpkg fakeroot rpmdevtools rpmlint rpm-build fedora-packager ruby rubygems xz p7zip unzip python3 squashfs-tools

      - name: Set up Node.js (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Node.js (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install npm Dependencies
        working-directory: electron
        run: npm install

      - name: Build RPM Package (Linux)
        if: matrix.platform == 'ubuntu-latest'
        working-directory: electron
        run: npm run dist -- --x64

      - name: Build Windows Package
        if: matrix.platform == 'windows-latest'
        working-directory: electron
        run: npm run dist -- --x64

      - name: Build macOS Package
        if: matrix.platform == 'macos-latest'
        working-directory: electron
        run: npm run dist -- --mac --universal

      - name: Rename Electron Files
        working-directory: electron/dist
        run: |
          # Rename all package files to include 'electron' suffix
          
          # Windows executables and installers
          find . -name "*.exe" -exec sh -c 'mv "$1" "${1%.exe}-electron.exe"' _ {} \;
          find . -name "*.msi" -exec sh -c 'mv "$1" "${1%.msi}-electron.msi"' _ {} \;
          
          # Linux packages  
          find . -name "*.rpm" -exec sh -c 'mv "$1" "${1%.rpm}-electron.rpm"' _ {} \;
          find . -name "*.deb" -exec sh -c 'mv "$1" "${1%.deb}-electron.deb"' _ {} \;
          find . -name "*.AppImage" -exec sh -c 'mv "$1" "${1%.AppImage}-electron.AppImage"' _ {} \;
          find . -name "*.tar.gz" -exec sh -c 'mv "$1" "${1%.tar.gz}-electron.tar.gz"' _ {} \;
          
          # macOS packages
          find . -name "*.dmg" -exec sh -c 'mv "$1" "${1%.dmg}-electron.dmg"' _ {} \;
          find . -name "*.zip" -exec sh -c 'mv "$1" "${1%.zip}-electron.zip"' _ {} \;
        shell: bash

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: googleballs-desktop-${{ matrix.platform }}_electron
          path: electron/dist/

  build-ios:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build iOS App
        run: |
          cd ios
          xcodebuild clean archive \
            -project "Google Balls.xcodeproj" \
            -scheme "Google Balls" \
            -configuration Release \
            -archivePath ./unsigned.xcarchive \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Create IPA
        run: |
          cd ios
          # Navigate into the archive and locate the app
          cd unsigned.xcarchive/Products/Applications/
          
          # Create a temporary directory for IPA creation
          mkdir -p ../../../ipa_temp/Payload
          
          # Copy the app to Payload directory
          cp -R "Google Balls.app" ../../../ipa_temp/Payload/
          
          # Navigate to the temp directory and create the IPA
          cd ../../../ipa_temp
          zip -r "../Google Balls-ios.ipa" Payload/
          
          # Clean up temp directory
          cd ..
          rm -rf ipa_temp
          
          echo "IPA created successfully"
          ls -la "Google Balls-ios.ipa"

      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-app_ios
          path: |
            ios/Google Balls-ios.ipa
            ios/unsigned.xcarchive

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Build APK
        working-directory: android
        run: ./gradlew assembleRelease

      - name: Sign & Align APK
        working-directory: android
        run: |
          APK_PATH=$(find app/build/outputs/apk/release -name '*-unsigned.apk' | head -1)
          UNSIGNED_APK="app/build/outputs/apk/release/GoogleBalls-unsigned.apk"
          SIGNED_APK="app/build/outputs/apk/release/Google Balls-signed.apk"

          cp "$APK_PATH" "$UNSIGNED_APK"

          # Zipalign (comes with build-tools)
          ZIPALIGNED_APK="app/build/outputs/apk/release/GoogleBalls-aligned.apk"
          $ANDROID_SDK_ROOT/build-tools/34.0.0/zipalign -f -p 4 "$UNSIGNED_APK" "$ZIPALIGNED_APK"

          # Debug keystore (if missing)
          if [ ! -f ~/.android/debug.keystore ]; then
            keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey \
              -keypass android -dname "CN=Android Debug,O=Android,C=US" -keyalg RSA -keysize 2048 -validity 10000
          fi

          # apksigner (replaces jarsigner)
          $ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner sign \
            --ks ~/.android/debug.keystore \
            --ks-pass pass:android \
            --key-pass pass:android \
            --out "$SIGNED_APK" \
            "$ZIPALIGNED_APK"

          # Verify
          $ANDROID_SDK_ROOT/build-tools/34.0.0/apksigner verify "$SIGNED_APK"


      - name: Upload Android APK
        uses: actions/upload-artifact@v4
        with:
          name: android-app_android
          path: android/app/build/outputs/apk/release/Google Balls-signed.apk
  build-psvita:
    runs-on: ubuntu-latest
    container: vitasdk/vitasdk:latest
    defaults:
      run:
        working-directory: ./vita  # do our stuff in the vita source directory

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apk add --no-cache cmake ninja pkgconfig
        vdpm SDL2

    - name: Configure CMake
      run: |
        cmake -S . -B build \
          -DCMAKE_TOOLCHAIN_FILE=$VITASDK/share/vita.toolchain.cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -G Ninja

    - name: Build
      run: cmake --build build

    - name: Upload VPK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: googleballs-vpk_psvita
        path: '**/*.vpk'

    - name: Upload SELF artifacts
      uses: actions/upload-artifact@v4
      with:
        name: googleballs-self_psvita
        path: '**/*.self'
  build-3ds:
    runs-on: ubuntu-latest
    container: devkitpro/devkitarm:latest
    defaults:
      run:
        working-directory: ./3ds  # do our stuff in the 3ds source directory

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo dkp-pacman -Syu --noconfirm
        sudo dkp-pacman -S --needed --noconfirm 3ds-dev
        sudo dkp-pacman -S --needed --noconfirm libctru citro3d citro2d

    - name: Set up environment
      run: |
        export DEVKITARM=/opt/devkitpro/devkitARM
        export DEVKITPRO=/opt/devkitpro
        echo "DEVKITARM=$DEVKITARM" >> $GITHUB_ENV
        echo "DEVKITPRO=$DEVKITPRO" >> $GITHUB_ENV
        echo "$DEVKITARM/bin" >> $GITHUB_PATH

    - name: Create source directory structure
      run: |
        mkdir -p source
        mkdir -p include
        mkdir -p build

    - name: Move source file
      run: |
        # Move the main.cpp to source directory (assuming it's in the root)
        if [ -f "main.cpp" ]; then
            mv main.cpp source/
        elif [ -f "google_balls_3ds.cpp" ]; then
            mv google_balls_3ds.cpp source/main.cpp
        else
            # Create the source file if it doesn't exist
            echo "Creating main.cpp from artifact..."
            # You'll need to manually copy your C++ code here or ensure it's in the repo
        fi

    - name: Build
      run: |
        make clean
        make -j$(nproc)

    - name: Upload artifact (3DSX file)
      uses: actions/upload-artifact@v4
      with:
        name: google-balls-3ds
        path: |
          ./3ds/*.3dsx
          ./3ds/*.smdh
  build-tizen:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Tizen Studio installer
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/tizen-studio_*.bin
          key: tizen-studio-installer

      - name: Download and Install Tizen Studio
        run: |
          # Download Tizen Studio Web CLI
          wget -q -O web-cli_Tizen_Studio_4.6_ubuntu-64.bin https://download.tizen.org/sdk/Installer/tizen-studio_4.6/web-cli_Tizen_Studio_4.6_ubuntu-64.bin
          chmod +x web-cli_Tizen_Studio_4.6_ubuntu-64.bin
          
          # Install Tizen Studio (headless installation)
          ./web-cli_Tizen_Studio_4.6_ubuntu-64.bin --accept-license --no-java-check
          
          # Add to PATH
          echo "$HOME/tizen-studio/tools/ide/bin" >> $GITHUB_PATH

      - name: Build Tizen Web App
        run: |
          cd tizen
          
          # Check if tizen CLI is available
          if [ -f "$HOME/tizen-studio/tools/ide/bin/tizen" ]; then
            echo "Using Tizen CLI to build..."
            $HOME/tizen-studio/tools/ide/bin/tizen build-web
          else
            echo "Tizen CLI not available, using manual build approach..."
            # Manual build approach - create .buildResult directory with web content
            mkdir -p .buildResult
            
            # Copy all web files to .buildResult (excluding tizen project files)
            cp -r * .buildResult/ 2>/dev/null || true
            
            # Remove non-web files from build result
            cd .buildResult
            rm -rf .buildResult .tproject .project *.xml 2>/dev/null || true
            
            echo "Manual build completed"
          fi
          
      - name: Create unsigned WGT package
        run: |
          cd tizen/.buildResult
          # Create WGT package manually (it's just a ZIP with .wgt extension)
          zip -r ../googleballs-app-unsigned.wgt *
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: googleballs-app-tizen
          path: tizen/*.wgt
  build-vscode:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: vscode/package-lock.json

      - name: Install dependencies
        run: |
          cd vscode
          npm install

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Package extension
        run: |
          cd vscode
          vsce package

      - name: Upload VSIX artifact
        uses: actions/upload-artifact@v4
        with:
          name: googleballs-vscode-extension
          path: vscode/*.vsix
  build-psp:
    runs-on: ubuntu-latest
    container: pspdev/pspdev:latest
    defaults:
      run:
        working-directory: ./psp
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install additional dependencies
      run: |
        apk add --no-cache bash make
        
    - name: Verify toolchain and files
      run: |
        echo "PSPDEV is set to: $PSPDEV"
        echo "PATH is: $PATH"
        which psp-gcc
        psp-gcc --version
        echo ""
        echo "=== Files in build directory ==="
        ls -la
        
    - name: Build PSP application
      run: |
        make
        
        # Verify the build was successful
        if [ ! -f "EBOOT.PBP" ]; then
          echo "Build failed - EBOOT.PBP not found"
          exit 1
        fi
        
        echo ""
        echo "=== Build successful! ==="
        ls -lah EBOOT.PBP
        
    - name: Upload PSP EBOOT
      uses: actions/upload-artifact@v4
      with:
        name: googleballs-psp
        path: psp/EBOOT.PBP
  build-webos:
    runs-on: ubuntu-latest

    steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
              node-version: '20'

        - name: Install dependencies
          run: |
              npm install -g @webosose/ares-cli
              npm install

        - name: Build project
          run: |
              npm run build || echo "No build script found, skipping"

        - name: Package webOS app
          run: |
              mkdir -p webos
              ares-package . -o ./webos

        - name: List output
          run: ls -R webos

        - name: Upload IPK artifact
          uses: actions/upload-artifact@v4
          with:
              name: webos-ipk
              path: webos/*.ipk
  build-uwp:
    runs-on: windows-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore UWP dependencies
      run: nuget restore uwp/GoogleBallsUWP.sln

    - name: Create self-signed certificate and export .cer and PFX
      shell: pwsh
      run: |
        $certPassword = ConvertTo-SecureString "googleballs" -Force -AsPlainText
        $certPath = "$PWD/uwp/GoogleBalls_TempCert.pfx"
        $cerPath  = "$PWD/uwp/GoogleBalls_TempCert.cer"

        # Create self-signed certificate
        $cert = New-SelfSignedCertificate -Type Custom `
                                          -Subject "CN=Google Balls TempCert" `
                                          -KeyExportPolicy Exportable `
                                          -KeySpec Signature `
                                          -NotAfter (Get-Date).AddYears(5) `
                                          -CertStoreLocation "Cert:\CurrentUser\My"

        # Export PFX with password
        Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $certPassword

        # Export CER for installation
        Export-Certificate -Cert $cert -FilePath $cerPath

        Write-Host "Certificate created at $certPath and $cerPath"

    - name: Build x86
      shell: pwsh
      run: |
        msbuild uwp/GoogleBallsUWP.sln `
          /p:Configuration=Release `
          /p:Platform=x86 `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateKeyFile="$PWD/uwp/GoogleBalls_TempCert.pfx" `
          /p:PackageCertificatePassword="googleballs" `
          /p:AppxBundle=Always

    - name: Build x64
      shell: pwsh
      run: |
        msbuild uwp/GoogleBallsUWP.sln `
          /p:Configuration=Release `
          /p:Platform=x64 `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateKeyFile="$PWD/uwp/GoogleBalls_TempCert.pfx" `
          /p:PackageCertificatePassword="googleballs" `
          /p:AppxBundle=Always

    - name: Build ARM
      shell: pwsh
      run: |
        msbuild uwp/GoogleBallsUWP.sln `
          /p:Configuration=Release `
          /p:Platform=ARM `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateKeyFile="$PWD/uwp/GoogleBalls_TempCert.pfx" `
          /p:PackageCertificatePassword="googleballs" `
          /p:AppxBundle=Always

    - name: Upload Appx and certificate artifacts
      uses: actions/upload-artifact@v4
      with:
        name: GoogleBalls-Appx-and-Cert
        path: |
          uwp/bin/x86/Release/Appx/
          uwp/bin/x64/Release/Appx/
          uwp/bin/ARM/Release/Appx/
          uwp/GoogleBalls_TempCert.cer